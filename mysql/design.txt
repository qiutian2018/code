数据库设计

需求分析=>逻辑设计=>物理设计=>维护优化

需求分析
1、数据是什么
2、数据有哪些属性
3、数据和属性各自的特点有哪些

逻辑设计
E-R建模

物理设计
1、数据库选型
2、表及字段命名规范
3、表结构设计,字段类型的选择

维护优化
1、新的需求进行建表
2、索引优化
3、大表拆分

三范式

1NF
数据库表中所有的字段都是单一属性,不可拆分的,这个单一属性是由基本的数据类型所构成的,整数,浮点数,字符串等,1NF中要求数据库表是一张二维表

2NF
拆分表,拆分成单关键字表,通过关联关系表示数据
=>商品表,供应商表,商品编号与供应商编号的关联表

3NF
字段值有无存在依赖其他字段的情况
可乐 5.00 500ml 酒水饮料 
如果没有这个商品,完全就查不到酒水饮料这个分类,这不合理

char与varchar
char避免存储大于50字节的数据
数据长度相差不多的情况下也更宜选择char类型

日期时间类型的存储
查询多的情况下用datetime较合适

主键的选择
1、区分业务主键和数据库主键,业务主键用于标识业务数据,进行表与表之前的关联,数据库主键为了优化数据存储
2、考虑主键是否要顺序增长
3、主键的字段类型所占空间要尽可能的小

避免使用外键约束
1、降低数据导入的效率
2、增加维护成本
3、不建议使用外键约束,但相关列一定要建立索引

避免使用触发器
1、降低数据导入的效率
2、可能会出现异响不到的数据异常,维护成本增加
3、使业务逻辑变复杂

预留字段 严禁使用预留字段
1、无意义
2、增加维护成本

反范式化 允许一定的数据冗余,提高读效率
1、减少表的关联数量
2、增加数据的读取效率
3、反范式化应适度

维护优化：
1、维护数据字典
2、维护索引
3、维护表结构
4、适当的时候进行表拆分

维护数据字典
1、使用第三方工具维护
2、利用字段备注来维护等
3、导出数据字典 sql语句查information_schema信息

维护索引
1、出现在where order by group by中的列
2、可选择性高的列要放在索引的前面
3、索引中不要包括太长的数据类型
4、过多的索引降低读写效率
5、定期维护索引碎片
6、在mysql语句中不要使用强制索引关键字

表结构维护
1、使用在线变更表结构的工具 pt-online-schema-change
2、同时对数据字典进行维护
3、控制表的宽度和大小

数据库中适合的操作
1、批量操作vs逐条操作
2、禁止使用select*
3、控制使用自定义函数
4、不要使用数据库中的全文索引

表的拆分
为控制表的宽度可以进行垂直拆分
1、经常查询的列放到一起
2、blob,text等大字段拆分到附加表中

为控制表的大小可以进行水平拆分
1、主键hash取余方式拆分,缺陷:当需要再度分表的时候需要全部数据再取一遍hash再分一遍,比如分32张表的时候某条数据hash取余的值是22,当分64张表的时候这条数据hash取余的值就是54了
2、根据某个字段的主键范围拆分,比如将某条记录某个关联字段的值为1-1000的数据放在第一个分表里,1001-2000的数据放在第二个分表里,这种方式扩展起来容易,要优于hash取余方式
