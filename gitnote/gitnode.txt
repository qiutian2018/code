# 查看某行代码由谁写的
git blame filepath
# 查看某个提交内容
git show commitID
# 更新远程分支变更
git remote update origin --prune
# 远程分支拉取的本地并新建一个分支
git checkout -b localBranchName origin/branchName
# 查看本地tag列表
git tag --list 或者git tag -l
# tag列表及注释信息
git tag -l -n
# 同步远程tag到本地
git fetch -t
# 打tag
git tag -a 'v20190426.1.0' -m '我是tag描述...'
# 推送本地tag到远程
git push origin --tags
# 查看远程仓库地址
git remote -v
# 删除本地tag
git tag -d tagId
# 删除线上tag
git push origin :refs/tags/tagId
# 查看某个文件代码变动(行级)
git blame filepath
# 删除本地分支
git branch -D branchName
# 删除远程分支
git remote update origin --prune
#分支提交以及合并历史
1、切换到某个分支(或者某个tag或者某个commit)
2、git log --oneline --graph
3、分析:
起点就是当前分支(或者某个tag或者某个commit)的提交依赖线的最后一个节点,顺着线往下走,遇到星号即为父节点
找其他节点的依赖线,一样是顺着线往下走,遇到星号即为父节点
# 移动HEAD到某个提交
git checkout HEAD~1
# 改变某个分支的引用到某个提交,可以用commitId或者当前HEAD引用的相对位置
git branch -f master commitId或者git branch -f master HEAD~3
# 撤销本地分支修改,撤销的修改还在暂存区
git checkout localBranch
git reset HEAD
# 交互式rebase,从HEAD前4个提交中选取提交记录
git rebase -i HEAD~4
# 撤销修改并产生一个撤销变动的提交,撤销的修改不在暂存区,已经将撤销生成一个新的提交id了
git checkout localBranch2
git revert HEAD
# 整理提交,将某些提交复制当前位置(HEAD)下面
git cherry-pick commitId1 commitId2 commitId3
# 查看提交日志 概要信息、详细变动
git log [-p]
# 有针对性的查看提交日志
git log [-p] filePath(or filePathDir or tagName or commitID or branchName)
