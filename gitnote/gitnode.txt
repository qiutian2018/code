# 查看某行代码由谁写的
git blame filepath
# 查看某个提交内容
git show commitID
# 更新远程分支变更
git remote update origin --prune
# 远程分支拉取的本地并新建一个分支
git checkout -b localBranchName origin/branchName
# 查看本地tag列表
git tag --list 或者git tag -l
# tag列表及注释信息
git tag -l -n
# 同步远程tag到本地
git fetch -t
# 打tag
git tag -a 'v20190426.1.0' -m '我是tag描述...'
# 推送本地tag到远程
git push origin --tags
# 查看远程仓库地址
git remote -v
# 删除本地tag
git tag -d tagId
# 删除线上tag
git push origin :refs/tags/tagId
# 查看某个文件代码变动(行级)
git blame filepath
# 删除本地分支
git branch -D branchName
# 删除远程分支
git remote update origin --prune
#分支提交以及合并历史
1、切换到某个分支(或者某个tag或者某个commit)
2、git log --oneline --graph
3、分析:
起点就是当前分支(或者某个tag或者某个commit)的提交依赖线的最后一个节点,顺着线往下走,遇到星号即为父节点
找其他节点的依赖线,一样是顺着线往下走,遇到星号即为父节点
# 移动HEAD到某个提交
git checkout HEAD~1
# 改变某个分支的引用到某个提交,可以用commitId或者当前HEAD引用的相对位置
git branch -f master commitId或者git branch -f master HEAD~3
# 撤销本地分支修改,撤销的修改还在暂存区
git checkout localBranch
git reset HEAD
git reset HEAD filePath
# 交互式rebase,从HEAD前4个提交中选取提交记录
git rebase -i HEAD~4
# 撤销修改并产生一个撤销变动的提交,撤销的修改不在暂存区,已经将撤销生成一个新的提交id了
git checkout localBranch2
git revert HEAD
# 整理提交,将某些提交复制当前位置(HEAD)下面
git cherry-pick commitId1 commitId2 commitId3
# 查看提交日志 概要信息、详细变动
git log [-p]
# 有针对性的查看提交日志
git log [-p] filePath(or filePathDir or tagName or commitID or branchName)
# 本地分支与远程分支关联关系
git branch -vv
# 排他式分支合并,合并其他分支,丢弃otherBranch分支任何(不管有无冲突)修改,实际上是什么也没有操作,只是增加了一个commitId
git merge -s ours otherBranch
# 交互排他式分支合并,合并其他分支,有冲突的地方,丢弃otherBranch分支修改,以自己分支为准
git merge -X ours otherBranch 等价于 git merge -s recursive -X ours otherBranch
# 交互排己式分支合并,合并其他分支,有冲突的地方,丢弃自己分支的,以otherBranch分支修改为准
git merge -X theirs otherBranch 等价于 git merge -s recursice -X theirs otherBranch
#查看提交信息object内容
git cat-file -p commitId
#分支的合并
合并两个基于某个基础提交还分开的分支，并不是移动分支指针就能解决问题的，它需要一种合并策略。
首先，我们需要明确的是谁和谁的合并，是 2，3 与 4，5，6的合并吗？说到分支，我们总会联想到线，就会认为是线的合并。
其实不是，真实合并的是 3 和 6。因为每一次提交都包含了项目完整的快照，即合并只是 tree 与 tree 的合并。
我们可以先想一个简单的算法。用来比较3和6。
但是我们还需要一个比较的标准，如果只是3和6比较，那么3与6相比，添加了一个文件，也可以说成是6与3比删除了一个文件，这无法确切表示当前的冲突状态。
因此我们选取他们的两个分支的分歧点（merge base）作为参考点，进行比较。
比较时，相对于 merge base（提交1）进行比较。
首先把1、3、6中所有的文件做一个列表，然后依次遍历这个列表中的文件。
现在我们拿列表中的一个文件进行举例，把在提交1、3、6中的该文件分别称为版本1、版本3、版本6。
版本1、版本3、版本6的 sha-1 值完全相同，这种情况表明没有冲突
版本3或6至少一个与版本1状态相同（指的是sha-1值相同或都不存在），这种情况可以自动合并。比如1中存在一个文件，在3中没有对该文件进行修改，而6中删除了这个文件，则以6为准就可以了
版本3或版本6都与版本1的状态不同，情况复杂一些，自动合并策略很难生效，需要手动解决。我们来看一下这种状态的定义。
冲突状态定义：
1 and 3: DELETED_BY_THEM;
1 and 6: DELETED_BY_US;
3 and 6: BOTH_ADDED;
1 and 3 and 6: BOTH_MODIFIED
我们拿第一种情况举例，文件有两种状态 1 和 3，1 表示该文件存在于 commit 1（也就是MERGE_BASE），3 表示该文件在 commit 3 （master 分支）中被修改了，没有 6，也就是该文件在 commit 6（feature 分支）被删除了，总结来说这种状态就是 DELETED_BY_THEM。
可以再看一下第四种情况，文件有三种状态 1、3、6，1 表示 commit 1（MERGE_BASE）中存在，3 表示 commit 3（master 分支）进行了修改，6 表示（feature 分支）也进行了修改，总结来说就是 BOTH_MODIFIED（双方修改）。
遇到不可自动合并冲突时，git会将这些状态写入到暂存区。与我们讨论不同的是，git使用1，2，3标记文件，1表示文件的base版本，2表示当前的分支的版本，3表示要合并分支的版本。

#变基操作rebase,慎用!!!禁止在master分支上使用rebase操作(git checkout master && git rebase dev)!!!可以在本地分支使用rebase(git checekout localDevBranch && git rebase master)
merge这种方式在某些情况下使用起来不太方便，比如当我们创建了 pr、mr 或者 将修改补丁发送给管理者，管理者在合并操作中产生了冲突，还需要去解决冲突，这无疑增加了他人的负担。
使用 rebase 可以解决这种问题。
基于commitId2迁出来的两个分支:
branchA: commitId3,commitId4,commitId5
branchB: commitId6,commitId7
git checkout branchB
git rebase branchA(把当前的branchB分支的所有提交移到branchA之后)
rebase 会把从 Merge Base 以来的所有提交，以补丁的形式一个一个重新达到目标分支上。这使得目标分支合并该分支的时候会直接 Fast Forward，即不会产生任何冲突。
提交历史是一条线，这对强迫症患者可谓是一大福音。rebase之后变成commitId2(公共commit),commitId3,commitId4,commitId5,commitId6',commitId7'。
这里可以看到rebase 的一个缺点，那就是修改了分支的历史提交。如果已经将分支推送到了远程仓库，会导致无法将修改后的分支推送上去，必须使用 -f 参数（force）强行推送。
所以使用rebase最好不要在公共分支上进行操作!!!
为什么不要再公共分支使用rebase?
因为往后放的这些 commit 都是新的,这样其他从这个公共分支拉出去的人，都需要再rebase,相当于你rebase东西进来，就都是新的commit了。